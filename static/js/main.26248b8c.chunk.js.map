{"version":3,"sources":["Card.js","Deck.js","App.js","serviceWorker.js","index.js"],"names":["Card","className","src","this","props","image","alt","value","suit","style","transform","angle","trans","Component","Deck","state","deckId","cards","cardsLeft","loading","drawCard","bind","getDeckId","axios","get","answer","status","console","log","deck_id","data","setState","a","async","newCard","randomNum","st","remaining","max","Math","random","map","c","onClick","disabled","renderCards","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6VAmBeA,G,uLAdb,OACC,yBACCC,UAAU,OACVC,IAAKC,KAAKC,MAAMC,MAChBC,IAAG,UAAKH,KAAKC,MAAMG,MAAhB,eAA4BJ,KAAKC,MAAMI,MAC1CC,MAAO,CACNC,UAAU,UAAD,OAAYP,KAAKC,MAAMO,MAAvB,0BAA8CR,KAAKC,MAC1DQ,MADO,cACIT,KAAKC,MAAMQ,MADf,c,GARKC,c,gBCgFJC,G,kBA7Ed,WAAYV,GAAQ,IAAD,8BAClB,4CAAMA,KACDW,MAAQ,CAAEC,OAAQ,KAAMC,MAAO,GAAIC,UAAW,GAAIC,SAAS,GAChE,EAAKC,SAAW,EAAKA,SAASC,KAAd,gBAHE,E,iFAOlBlB,KAAKmB,c,sIAIgBC,IAAMC,IAC1B,kE,OAGqB,OAJhBC,E,QAIKC,OACVC,QAAQC,IAAR,wBAA6BH,EAAOC,UAE5BG,EAAYJ,EAAOK,KAAnBD,QACR1B,KAAK4B,SAAS,CAAEf,OAAQa,K,kKAKpB1B,KAAKY,MAAMC,SAAUb,KAAKY,MAAMI,Q,iDAErChB,KAAK4B,SAAS,CAAEZ,SAAS,IAAQ,4BAAAa,EAAAC,OAAA,kEAAAD,EAAA,MACXT,IAAMC,IAAN,8CACmB,EAAKT,MAAMC,OAD9B,oBADW,OAC1BS,EAD0B,OAK1BS,EAL0B,eAM5BT,EAAOK,KAAKb,MAAM,GANU,CAO/BN,MAAO,EAAKwB,UAAU,IACtBvB,MAAO,EAAKuB,UAAU,MAEvBR,QAAQC,IAAIM,GACZ,EAAKH,UAAS,SAACK,GAAD,MAAS,CACtBnB,MAAM,GAAD,mBAAOmB,EAAGnB,OAAV,CAAiBiB,IACtBhB,UAAWO,EAAOK,KAAKO,UACvBlB,SAAS,MAdsB,wC,iFAmBxBmB,GACT,OAAIC,KAAKC,SAAW,GACZD,KAAKC,UAAYF,EAElBC,KAAKC,SAAWF,I,oCAIvB,OAAOnC,KAAKY,MAAME,MAAMwB,KAAI,SAACC,GAAD,OAAO,kBAAC,EAASA,Q,+BAI7C,OACC,yBAAKzC,UAAU,QACd,2CACA,wDACA,sCAAYE,KAAKY,MAAMG,UAAvB,WACCf,KAAKY,MAAMG,UAAY,GACvB,4BACCjB,UAAU,WACV0C,QAASxC,KAAKiB,SACdwB,SAAUzC,KAAKY,MAAMI,SAHtB,gBAQD,yBAAKlB,UAAU,kBAAkBE,KAAK0C,oB,GAxEvBhC,c,MCOJiC,MARf,WACC,OACC,yBAAK7C,UAAU,OACd,kBAAC,EAAD,QCKiB8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.26248b8c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Card.css';\n\nclass Card extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<img\n\t\t\t\tclassName=\"Card\"\n\t\t\t\tsrc={this.props.image}\n\t\t\t\talt={`${this.props.value} OF ${this.props.suit}`}\n\t\t\t\tstyle={{\n\t\t\t\t\ttransform: `rotate(${this.props.angle}deg) translate(${this.props\n\t\t\t\t\t\t.trans}px,${this.props.trans}px)`\n\t\t\t\t}}\n\t\t\t/>\n\t\t);\n\t}\n}\n\nexport default Card;\n","import React, { Component } from 'react';\nimport Card from './Card';\nimport axios from 'axios';\nimport './Deck.css';\n\nclass Deck extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = { deckId: null, cards: [], cardsLeft: 52, loading: false };\n\t\tthis.drawCard = this.drawCard.bind(this);\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.getDeckId();\n\t}\n\n\tasync getDeckId() {\n\t\tconst answer = await axios.get(\n\t\t\t'https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1'\n\t\t);\n\n\t\tif (answer.status !== 200) {\n\t\t\tconsole.log(`DeckId error. ${answer.status}`);\n\t\t} else {\n\t\t\tconst { deck_id } = answer.data;\n\t\t\tthis.setState({ deckId: deck_id });\n\t\t}\n\t}\n\n\tasync drawCard() {\n\t\tif (!this.state.deckId || this.state.loading) return;\n\n\t\tthis.setState({ loading: true }, async () => {\n\t\t\tconst answer = await axios.get(\n\t\t\t\t`https://deckofcardsapi.com/api/deck/${this.state.deckId}/draw/?count=1`\n\t\t\t);\n\n\t\t\tconst newCard = {\n\t\t\t\t...answer.data.cards[0],\n\t\t\t\tangle: this.randomNum(25),\n\t\t\t\ttrans: this.randomNum(15)\n\t\t\t};\n\t\t\tconsole.log(newCard);\n\t\t\tthis.setState((st) => ({\n\t\t\t\tcards: [ ...st.cards, newCard ],\n\t\t\t\tcardsLeft: answer.data.remaining,\n\t\t\t\tloading: false\n\t\t\t}));\n\t\t});\n\t}\n\n\trandomNum(max) {\n\t\tif (Math.random() > 0.5) {\n\t\t\treturn Math.random() * -max;\n\t\t}\n\t\treturn Math.random() * max;\n\t}\n\n\trenderCards() {\n\t\treturn this.state.cards.map((c) => <Card {...c} />);\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"Deck\">\n\t\t\t\t<h1>Card Dealer</h1>\n\t\t\t\t<h3>A simple react excercise</h3>\n\t\t\t\t<h6>Remain {this.state.cardsLeft} cards.</h6>\n\t\t\t\t{this.state.cardsLeft > 0 && (\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName=\"Deck-btn\"\n\t\t\t\t\t\tonClick={this.drawCard}\n\t\t\t\t\t\tdisabled={this.state.loading}\n\t\t\t\t\t>\n\t\t\t\t\t\tGimme a card\n\t\t\t\t\t</button>\n\t\t\t\t)}\n\t\t\t\t<div className=\"Deck-container\">{this.renderCards()}</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Deck;\n","import React from 'react';\nimport Deck from './Deck';\nimport './App.css';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Deck />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}